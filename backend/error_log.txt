C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:418: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe[column[0]] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:422: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["common_words_score_fake"] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:437: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["common_words_score_true"] = [
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:442: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["flesch_reading_ease"] = textstat.flesch_reading_ease(sentence)
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:443: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["flesch_kincaid_grade"] = textstat.flesch_kincaid_grade(sentence)
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:444: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["gunning_fog"] = textstat.gunning_fog(sentence)
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:445: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["smog_index"] = textstat.smog_index(sentence)
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:446: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["ari"] = textstat.automated_readability_index(sentence)
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:447: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["coleman_liau_index"] = textstat.coleman_liau_index(sentence)
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:448: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["linsear_write"] = textstat.linsear_write_formula(sentence)
C:\Users\hayl0\Documents\uni\COMP3900\capstone-project-3900m13aquantumquokkas\backend\backend.py:449: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  pd_dataframe["dale_chall"] = textstat.dale_chall_readability_score(sentence)
